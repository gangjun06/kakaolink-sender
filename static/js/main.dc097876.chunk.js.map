{"version":3,"sources":["components/Navbar.tsx","App.tsx","reportWebVitals.ts","pages/Home.tsx","utils/Message.ts","pages/Redirect.tsx","index.tsx"],"names":["Navbar","AppBar","position","Toolbar","className","Typography","variant","Button","color","startIcon","GitHub","App","children","useEffect","kakao","window","Kakao","init","api_key","console","log","isInitialized","Container","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Home","defaultInputProp","validators","errorMessages","fullWidth","defaultContent","title","description","imageUrl","link","webUrl","useState","content","setContent","useImage","setUseImage","getValue","target","value","onSubmit","data","Link","sendDefault","Send","objectType","document","URL","btoa","Card","CardContent","component","Box","mt","label","name","onChange","flex","FormControlLabel","control","Switch","checked","_","CardActions","type","onClick","Redirect","history","useHistory","href","queryString","parse","location","search","encodeURI","atob","Array","isArray","push","style","top","left","transform","fontSize","ReactDOM","render","StrictMode","exact","path","getElementById"],"mappings":"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","file":"static/js/main.dc097876.chunk.js","sourcesContent":["import React, { FC } from 'react'\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button\n} from '@material-ui/core'\nimport { GitHub } from '@material-ui/icons'\n\nconst Navbar: FC = () => {\n  return (\n    <AppBar position='static'>\n      <Toolbar className='flex justify-between'>\n        <Typography variant='h6'>Kakaolink Sender</Typography>\n        <div>\n          <Button color='inherit' startIcon={<GitHub />}>\n            Source Code\n          </Button>\n        </div>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Navbar\n","import React, { FC, useEffect } from 'react'\nimport Navbar from './components/Navbar'\nimport { Container } from '@material-ui/core'\n\nimport { api_key } from './config.json'\n\nconst App: FC = ({ children }) => {\n  useEffect(() => {\n    const kakao = window.Kakao\n    kakao.init(api_key)\n    console.log(kakao.isInitialized())\n  }, [])\n\n  return (\n    <div className='App'>\n      <Navbar />\n      <Container>\n        <div id='app-container'>{children}</div>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React, { FC, FormEvent, useEffect, useState } from 'react'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Button,\n  Box,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  FormControlLabel,\n  Switch\n} from '@material-ui/core'\nimport { Link, LinkContent } from '../types'\nimport { Send } from '../utils/Message'\n\nconst errReq = '이 필드는 필수입니다'\n\nconst Home: FC = () => {\n  const defaultInputProp = {\n    validators: ['required'],\n    errorMessages: [errReq],\n    fullWidth: true\n  }\n\n  const defaultContent: LinkContent = {\n    title: '',\n    description: '',\n    imageUrl: '',\n    link: {\n      // mobileWebUrl: '',\n      webUrl: ''\n    }\n  }\n\n  const [content, setContent] = useState<LinkContent>(defaultContent)\n\n  const [useImage, setUseImage] = useState<boolean>(false)\n\n  const getValue = (target: EventTarget) =>\n    (target as HTMLTextAreaElement).value\n\n  useEffect(() => {}, [])\n\n  const handleSubmit = () => {\n    const data: Link = {\n      objectType: 'feed',\n      content: {\n        ...content,\n        link: {\n          webUrl: `${document.URL}Redirect?href=${window.btoa(\n            content.link.webUrl\n          )}`\n        }\n      }\n    }\n    Send(data)\n  }\n\n  const resetForm = () => {\n    setContent(defaultContent)\n  }\n\n  return (\n    <ValidatorForm onSubmit={handleSubmit}>\n      <Card>\n        <CardContent>\n          <Typography variant='h6' component='h2'>\n            카카오 링크 보내기\n          </Typography>\n          <Box mt={2}>\n            <TextValidator\n              label='제목'\n              name='title'\n              onChange={({ target }) =>\n                setContent({\n                  ...content,\n                  title: getValue(target)\n                })\n              }\n              value={content.title}\n              {...defaultInputProp}\n            />\n            <br />\n            <TextValidator\n              label='설명'\n              name='description'\n              onChange={({ target }) =>\n                setContent({\n                  ...content,\n                  description: getValue(target)\n                })\n              }\n              value={content.description}\n              {...defaultInputProp}\n            />\n            <br />\n            <Box flex='row'>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={useImage}\n                    onChange={(_, checked) => setUseImage(checked)}\n                    name='useImage'\n                    color='primary'\n                  />\n                }\n                label='이미지 사용'\n              />\n              {useImage && (\n                <TextValidator\n                  label='이미지 URL'\n                  name='imageURL'\n                  onChange={({ target }) =>\n                    setContent({\n                      ...content,\n                      imageUrl: getValue(target)\n                    })\n                  }\n                  value={content.imageUrl}\n                  {...defaultInputProp}\n                />\n              )}\n            </Box>\n            <br />\n            <TextValidator\n              label='링크'\n              name='url'\n              onChange={({ target }) =>\n                setContent({\n                  ...content,\n                  link: {\n                    webUrl: getValue(target)\n                  }\n                })\n              }\n              value={content.link.webUrl}\n              {...defaultInputProp}\n            />\n          </Box>\n        </CardContent>\n        <CardActions>\n          <Button variant='contained' color='primary' type='submit'>\n            Send\n          </Button>\n          <Button variant='outlined' color='secondary' onClick={resetForm}>\n            Reset\n          </Button>\n        </CardActions>\n      </Card>\n    </ValidatorForm>\n  )\n}\n\nexport default Home\n","import { Link } from \"../types\"\n\nexport const Send = (data: Link) => {\n  window.Kakao.Link.sendDefault(data)\n}\n","import React, { FC, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport queryString from 'query-string'\n\nconst Redirect: FC = () => {\n  const history = useHistory()\n  useEffect(() => {\n    const { href } = queryString.parse(history.location.search)\n    if (!href) history.push('/')\n    else\n      window.location.href = window.encodeURI(\n        window.atob(Array.isArray(href) ? href[0] : href)\n      )\n  }, [])\n  return (\n    <div>\n      <div\n        style={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          fontSize: '30px'\n        }}>\n        해당 사이트로 이동 중입니다\n      </div>\n    </div>\n  )\n}\n\nexport default Redirect\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter, HashRouter, Route } from 'react-router-dom'\nimport reportWebVitals from './reportWebVitals'\nimport Home from './pages/Home'\nimport Redirect from './pages/Redirect'\n\n\ndeclare global {\n  interface Window {\n    Kakao: any\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App>\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/redirect\" component={Redirect}/>\n      </App>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}